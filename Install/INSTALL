You will need to have the libxml library, version 1.8.8 or higher (in
the 1.8.* series). You can download this from

   ftp.gnome.org/pub/GNOME/stable/sources/libxml

(Untar it, change directory to the top level of that
source tree and give the two commands
      ./configure
      make
)

There is also optional support for reading data directly from a MySQL
database. (The configuration for this has not been ironed out yet.)


There are various ways to use ggobi and hence different features that
one can enable when compiling ggobi.
  a) stand-alone,

  b) stand-alone with XML support,

  c) stand-alone & embeddable ggobi library,
      (this implies an embeddable ggobi library is created.)

  d) stand-alone & embeddable ggobi library with XML support,

  d) R interface
     (allowing ggobi to be controlled from R)

  e) Python interface
      (allowing ggobi to be controlled from Python)       

  f) Perl   interface
      (allowing ggobi to be controlled from Perl)       
  
We strongly recommend b), i.e. compiling with XML support.  You will
need to have Daniel Veillard's libxml installed and you will need to
indicate where the development header files are located.

Now, configure the distribution for compilation.

  ./configure --with-xml='directory into which you untarred libxml' --enable-embed

So on my machine, I give the command
  ./configure --with-xml=$HOME/XML/libxml-1.8.9 --enable-embed 

The packages in d), e) and f) are not included directly in this
distribution. They can be downloaded separately from the ggobi Web
site (http://www.ggobi.org). Having downloaded them and untarred them
from within this directory, the basic configuration can arrange to
compile these, in addition to the core application.

For example, to configure ggobi and R, with support for XML, the
following steps work (if the ggobi.tar.gz and Rggobi.tar.gz are in the
same directory.)

   tar zxvf ggobi_0.5-0.tar.gz
   cd ggobi
   tar zxvf ../Rggobi_0.1-0.tar.gz
   ./configure --with-R --with-xml=$HOME/XML/libxml-1.8.10
   make

When configuring the Rggobi library, it is often convenient to be 
able to specify the target directory into which the package will be
installed, i.e. the -l argument to R's INSTALL command. This can be done
by specifying the directory as the value of the --with-R flag. For example,

       --with-R=/tmp/R/pkg


XML support:
============
  Some Linux systems have a version of libxml installed by default in
/usr/lib or /usr/local/lib and headers in
/usr/local/include/gnome-xml.  In some cases, these are older versions
of libxml and will not work (easily) with ggobi. While it would be simpler
to install libxml-1.8.9 on your system and replace the existing one, that
approach may break other applications. 

  To deal with this need for a more recent version of libxml while
leaving the older version as the installed default library, one has
to follow these steps:
   
   1) download libxml and compile libxml in non-system directory as described above. 
      This directory might be in your home directory. The compilation should 
      leave you with a directory libxml-1.8.9/ which contains (amongst other things)
          a) a libmxml/ directory in which the header files such as parser.h and tree.h reside;
          b) a .libs/ directory in which libxml.so resides.
      Note the name of this top-level directory. 

   2) configure the ggobi distribution using the --with-xml flag as
       cd ggobi
       ./configure --with-xml=/top-level/directory/of/libxml-1.8.9

       make

 This should be sufficient to _compile_ ggobi with the correct include
and library files. However, when one runs ggobi, it will not
necessarily find that newer library, but instead may use the system
default one in /usr/lib or wherever.  The ggobi script in bin/ however
takes care of this by setting the LD_LIBRARY_PATH appropriately
to refer to the .libs/ directory.







Running ggobi:
==============

To run ggobi or any application that uses the ggobi library
(e.g. xmlConvert, the R package, etc.), one must be able to find the
libgtkext.so and libggobi.so libraries.  The same applies for the XML
library, libxml.so. This can be done by installing them into a place
that `ldconfig' searches or by having that directory referenced in
your LD_LIBRARY_PATH.  Scripts to set the LD_LIBRARY_PATH variable
appropriately is given in the bin/ directory. There is one for the
Bourne shell and another for the C shell. Invoke these scripts as
 
       . bin/setLD.bsh

       source bin/setLD.bsh


Note that on many machines, there is already a version of the libxml
library installed in /usr/lib/ and this will be found by default.
In most cases, this is ok. In others, compiling against one version
and loading another will cause obscure failures.
