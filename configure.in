dnl This is the configuration script for ggobi

AC_INIT(ggobi, 2.0, ggobi-help@lists.ggobi.org)

# Get the version information.
. VersionInfo

TOP_DIR=`pwd`

if test -d .svn ; then
 GGOBI_VERSION_STRING="SVN version (`date`)"
fi

PLUGIN_DIRS=""

AC_ARG_ENABLE(embed, [--enable-embed          Build the ggobi library for embedding in other applications (e.g. R) (yes)])

AC_ARG_ENABLE(debug, [--enable-debug          Compile with debugging symbols])

AC_ARG_ENABLE(debug, [--enable-local          Configure for use directly from this directory tree.])

# , enable_local="$enable_val")

dnl AC_ARG_WITH(prefix, [--with-prefix          Specify where the files are to be installed (default /usr/local/).],INSTALL_DIR=${with_prefix},INSTALL_DIR="/usr/local")

AC_ARG_WITH(xml,
  --with-xml          Enable reading and writing of XML datasets (yes),,with_xml="yes")

AC_ARG_WITH(mysql,
  --with-mysql        Enable plugin for reading data from MySQL databases, 
  MYSQL_PLUGIN=1; PLUGIN_DIRS="MySQL"; ENABLE_PLUGINS=1)

AC_ARG_WITH(postgres,
  --with-postgres          Enable plugin reading data from Postgres databases., 
  POSTGRES_PLUGIN=1; PLUGIN_DIRS="${PLUGIN_DIRS} Postgres"; ENABLE_PLUGINS=1)

AC_ARG_WITH(dataviewer,
  --with-dataviewer          Enable plugin for viewing data in a datagrid., 
  DATAVIEWER_PLUGIN=1;  PLUGIN_DIRS="${PLUGIN_DIRS} DataViewer"; ENABLE_PLUGINS=1)

AC_ARG_WITH(fileselector,
  --with-fileselector          Enable GtkExtra file selector plugin, 
  FILESELECTOR_PLUGIN=1;  PLUGIN_DIRS="${PLUGIN_DIRS} FileSelect"; ENABLE_PLUGINS=1)

AC_ARG_WITH(graphlayout,
  [--with-graphlayout          Enable GraphLayout plugin], 
  [echo "With graphlayout"; GRAPHLAYOUT_PLUGIN=1;  PLUGIN_DIRS="${PLUGIN_DIRS} GraphLayout"; ENABLE_PLUGINS=1])

AC_ARG_WITH(ggvis,
  --with-ggvis          Enable ggvis plugin, 
  [GGVIS_PLUGIN=1;  PLUGIN_DIRS="${PLUGIN_DIRS} ggvis"; ENABLE_PLUGINS=1])

AC_ARG_WITH(graphaction,
  --with-graphaction          Enable graph operations plugin, 
  [GRAPHACTION_PLUGIN=1;  PLUGIN_DIRS="${PLUGIN_DIRS} GraphAction"; ENABLE_PLUGINS=1])

AC_ARG_WITH(varcloud,
  --with-varcloud          Enable variogram cloud plugin, 
  [VARCLOUD_PLUGIN=1;  PLUGIN_DIRS="${PLUGIN_DIRS} VarCloud"; ENABLE_PLUGINS=1])
AC_ARG_WITH(plugins, [--with-plugins          Enable all the plugins (no)], ENABLE_ALL_PLUGINS=1)



echo "Prefix: $prefix"
if test "$prefix" = "NONE" ; then
 prefix=/usr/local
fi

if test "${prefix}" = "`pwd`" ; then
 enable_local=yes
fi


echo "Enable local ${enable_local}"

if test -n "${enable_local}" &&  test "${enable_local}" != "no" ; then
 echo "Installing into build directory."
 INSTALL_DIR="`pwd`"
 GGOBI_INSTALL_HOME="${INSTALL_DIR}"
 LOCAL_INSTALL="yes"
 INSTALL_SRC_CFLAGS="-I${INSTALL_DIR}/src"
else
 INSTALL_DIR=$prefix
 INSTALL_SRC_CFLAGS="-I${INSTALL_DIR}/include/ggobi"
 GGOBI_INSTALL_HOME="${INSTALL_DIR}/ggobi/"
fi

dnl We need the Windows style path here for Inno
if test "`uname`" = "MINGW32_NT-5.1"; then
	GGOBI_HOME=`pwd -W`
else
	GGOBI_HOME=`pwd`
fi

echo "Install home: $GGOBI_INSTALL_HOME"

AC_SUBST(LOCAL_INSTALL)


dnl The user might have given us a list of the plugins directly as the value of --with-plugins="a b c"

if test "$with_plugins" != "" && test "$with_plugins" != "yes" && test "$with_plugins" != "y" &&  test "$with_plugins" != "no" && test "$with_plugins" != "n" ; then
 PLUGIN_DIRS=$with_plugins
 ENABLE_ALL_PLUGINS=0
fi


dnl AC_ARG_WITH(R,     --with-R         Install the Rggobi package)
dnl AC_ARG_WITH(Python,--with-Python    Install the Pythonggobi module)
dnl AC_ARG_WITH(Perl,  --with-Perl      Install the Perlggobi module)

 echo "Looking for gtk2"
 AC_PATH_PROG(PKG_CONFIG, pkg-config,, $PATH)
 if test -z "${PKG_CONFIG}" ; then
   echo "Cannot find pkg-config"
   exit 2
 fi

  GTK_CFLAGS=`${PKG_CONFIG} --cflags gtk+-2.0`
  GTK_LIBS=`${PKG_CONFIG} --libs gtk+-2.0`
  AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal, , $PATH)
  GTK_VERSION=`$PKG_CONFIG --modversion gtk+-2.0`

AC_SUBST(GLIB_GENMARSHAL)

AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

echo "Setting gtk flags: cflags=$GTK_CFLAGS, libs=$GTK_LIBS"

AC_PATH_PROG(UNAME, uname)
if test -n  "${UNAME}" ; then
 OS_INFO=`uname -a`
fi

AC_PATH_PROG(INSTALL, install)

if test -z "${INSTALL}" ; then
  echo "******* Cannot find the executable 'install'. Will not be able to install the different pieces."
fi

AC_SUBST(INSTALL)

DEFAULT_LIB_DIRS="/usr/lib /usr/local/lib /opt/lib"
DEFAULT_INC_DIRS="/usr/include /usr/local/include /usr/local/src/include /usr/include/gnome-xml"

AC_PROG_CC

LO_DIR=.

c_rules_frag=.CRulesFrag
SHLIB_EXT="so"

if test "`uname`" = "Darwin" ; then
 echo "Darwin operating system detected."
 PIC_CFLAG=-fno-common
 AC_PATH_PROG(ARCH, arch)
 if test -z "${ARCH}" ; then
  AC_MSG_WARN(Guessing ppc arch)
  ARCH="ppc"
 else
  ARCH=`arch`
 fi
 SHLIB_LDFLAGS="-dynamic -arch_only ${ARCH}"
 OTHER_CFLAGS="${OTHER_CFLAGS} -DDarwin"
# SHLIB_LDFLAGS="-dylib -flat_namespace -undefined suppress"
 SHLIB_EXT="dylib"

cat << \EOF > ${c_rules_frag}
%.o: %.c
	$(CC) $(CFLAGS) $(OTHER_CFLAGS) -c $< -o $@

%.lo: %.c
	$(CC) $(CFLAGS) $(OTHER_CFLAGS) $(PIC_CFLAG) -c $< -o $@

EOF

elif test "${GCC}" = "yes" ; then
if test "`uname`" = "MINGW32_NT-5.1"; then
  SHLIB_EXT="dll"
  EXE_EXT=".exe"
  OTHER_CFLAGS="${OTHER_CFLAGS} -mms-bitfields"
  LDFLAGS="-mwindows"
else 
  PIC_CFLAG=-fPIC
fi
# SHLIB_LDFLAGS=-shared
 LO_DIR=.


cat << \EOF > ${c_rules_frag}
%.lo: %.c
	$(CC) $(CFLAGS) $(OTHER_CFLAGS) -c $< -o $@
	
%.o: %.c
	$(CC) $(CFLAGS) $(OTHER_CFLAGS) -c $< -o $@

# Just copy the .o to .lo since the .o is position independent
# and relocatable by default with gcc.
# (Could be a symbolic link also)
#%.lo: %.o
#	cp $*.o $@

EOF
else
   dnl assume the Solaris cc compiler
 PIC_CFLAG=-KPIC
 OTHER_CFLAGS="-DG_INLINE_FUNC=extern"
# SHLIB_LDFLAGS=-G
 LO_DIR=.libs

cat << \EOF > ${c_rules_frag}
%.lo: %.c
	@test -d ${LO_DIR} || mkdir ${LO_DIR}
	$(CC) $(PIC_CFLAG) $(CFLAGS) $(OTHER_CFLAGS) -c $< -o ${LO_DIR}/$*.o
	mv ${LO_DIR}/$*.o $*.lo
EOF

fi

AC_SUBST(SHLIB_EXT)

dnl whether dlopen needs -ldl (such as on Darwin)
AC_CHECK_LIB(dl, dlopen)

dnl This will hopefully check whether the -shared flag works
dnl to create a shared library or whether we should use -G.
dnl Unchecked on the platforms that want to use -G.
if test -z "${SHLIB_LDFLAGS}" ; then
 echo "Checking flag for linking shared libraries"
 OLD_LDFLAGS="${LDFLAGS}"
 LDFLAGS="-shared"
 AC_TRY_LINK(,[int i=0; i++;], SHLIB_LDFLAGS="-shared", [USE_G="no"; echo "-G doesn't work"])
 if test "${USE_G}" = "no" ; then
   LDFLAGS="-G"
   AC_TRY_LINK(,[int i=0; i++;], SHLIB_LDFLAGS="-G",
        [echo "Cannot determine flag for creating shared libraries. Please specify this via the environment variable SHLIB_LDFLAGS"])
 fi
 echo "SHLIB linker flags: ${SHLIB_LDFLAGS}"
 LDFLAGS="${OLD_LDFLAGS}"
fi

dnl headers that are not present everywhere
AC_CHECK_HEADERS([malloc.h values.h])

AC_SUBST(OTHER_CFLAGS)
AC_SUBST_FILE(c_rules_frag)

 dnl Start looking for the XML libraries.

if test -n "${with_xml}" && test "${with_xml}" != "no" ; then

   dnl If the file libxml.tar.gz exists in this directory
   dnl assume it is a libxml distribution that we will install
   dnl locally
   dnl Can override the use of libxml.tar.gz  by setting XML_CONFIG
   dnl environment variable.
 if test -r libxml.tar.gz ; then

  if test -x libxml-install/bin/xml2-config ; then
    AC_PATH_PROG(XML_CONFIG, xml2-config,, ./libxml-install/bin:$PATH)
  fi

  if test -z "${XML_CONFIG}" ; then
   echo "Building ggobi-specific version of libxml"
   (gunzip -c libxml.tar.gz | tar xf -)
   LIBXML_VERSION=`tar tzvf libxml.tar.gz | head -n 1 | sed 's/^.*libxml2-//' | sed 's|/$||'`
   cd libxml2-${LIBXML_VERSION} 
   echo "Configuring libxml, to be installed in ${TOP_DIR}/libxml-install"
   ./configure --prefix=${TOP_DIR}/libxml-install
   echo "Compiling libxml"
   make 
   echo "Installing libxml (locally)"
   make install

   XML_CONFIG=${TOP_DIR}/libxml-install/bin/xml2-config
   echo "Using local xml2-config $XML_CONFIG"
   dnl Set LOCAL_LIBXML_INSTALLATION so that we know where
   dnl the libxml is when we install ggobi into a system
   dnl location (rather than locally).
   LOCAL_LIBXML_INSTALLATION="${TOP_DIR}/libxml-install"
   XML_LIB_DIRS_PATH=${LOCAL_LIBXML_INSTALLATION}/lib   
   cd ..
  else
   echo "Using previously compiled ggobi-specific version of libxml in libxml-install/"
  fi
 fi

 echo "with_xml: ${with_xml}"

dnl We can loop over the values passed to us in the value of with_xml:
dnl  if test "${with_xml}" != "yes" ; then 
dnl    for f in ${with_xml} ; do 
dnl      echo $f
dnl    done
dnl  fi

 if test -d "${with_xml}" && test -r ${with_xml}/entities.c ; then
   echo "Using libxml distribution directory ${with_xml}"
   if test -r "${with_xml}/xml2-config" ; then
    XML_VERSION="2"
   else
    XML_VERSION="1"
   fi
 else 
  if test -z "${XML_CONFIG}" ; then
   XML_CONFIG="${PKG_CONFIG} libxml-2.0"
   if test -z "${XML_CONFIG}" ; then
     AC_PATH_PROG(XML_CONFIG, xml2-config)
   fi
   if test -z "${XML_CONFIG}" ; then
     AC_PATH_PROG(XML_CONFIG, xml-config)
     if test -n "${XML_CONFIG}" ; then
       XML_VERSION="1"
     fi
   else
      XML_VERSION="2"
   fi
  else
    XML_VERSION=`${XML_CONFIG} --version | sed -e 's/\..*//g'`
  fi
 fi
 
 if test -n "${XML_CONFIG}" ; then

   echo  "Have xml-config: $XML_CONFIG"
   XML_INC_DIRS=`$XML_CONFIG --cflags`
   XML_LIB_DIRS=`$XML_CONFIG --libs`
   TMP="ok"

 else  dnl So we have to find the xml installation files ourselves.

   dnl If the user gave us a --with-xml=value,
   dnl then use that as the setting for the include
   dnl and lib directory.
  if test -d ${with_xml} ; then

    # check if the user has given us the include directory rather than
    # the top-level libxml distribution directory.

   if test -r "${with_xml}/tree.h" ; then
    if test ! -r "${with_xml}/entities.c" ; then
     with_xml=`cd ${with_xml}/.. ; pwd`
    else
      XML_INC_DIRS="${with_xml}"
    fi
   fi

   if test -d "${with_xml}/include" ; then
    XML_INC_DIRS="${with_xml}/include"
   fi

   if test "${XML_VERSION}" != "1" ; then
      XML_LINK_LIB="-lxml${XML_VERSION}"
   else
      XML_LINK_LIB="-lxml"
   fi
    XML_LIB_DIRS="-L${with_xml}/.libs ${XML_LINK_LIB} -lz"
      dnl Have to get a version that can be used in LD_LIBRARY_PATH,
      dnl i.e. with the spaces replaced by :
    XML_LIB_DIRS_PATH=`echo "${with_xml} ${with_xml}/.libs" | sed -e 's/[ \t]*/:/g'`
  fi


       dnl Now find the libxml-1.8.*

   ORIG_CPPFLAGS=$CPPFLAGS
   for f in $XML_INC_DIRS ${DEFAULT_INC_DIRS} ; do 
     for ext in / /xml /libxml ; do
       TMP=""
       if test -r $f$ext/parser.h ; then
         TMP=$f$ext 
         XML_INC_DIRS="-I${TMP}"
       fi
dnl      CPPFLAGS="${ORIG_CPPFLAGS} -I$f$ext"
dnl      AC_CHECK_HEADER(parserInternals.h, XML_INC_DIRS=$f$ext)

      if test "${TMP}"  != "" ; then
        echo "Found XML include file(s): $XML_INC_DIRS, ($TMP)"
        break
      fi

     done
     if test "${TMP}" != "" ; then 
       break;
     fi
   done

  dnl now we should test for the library.

  fi dnl end of else part of if test -n ${XML_CONFIG} ; ...

  if test "${TMP}" = "" ; then
    echo "Cannot find the XML header files. Please specify these via"
    echo "--with-xml=<dir>, or by setting the XML_INC_DIRS environment variable."
    exit 2
  else
    XML_CFLAG_DEFINES="-DUSE_XML=${XML_VERSION}"
    USE_XML="USE_XML=${XML_VERSION}"
    XML_SRC="read_xml.c write_xml.c read_init.c plugin.c write_state.c read_color.c"
echo "USE_XML := ${USE_XML}"
echo "XML Version := ${XML_VERSION}"
    enable_embed="yes"
dnl -DDIR_SEPARATOR=\"'/'\""
  fi

  if test "${XML_VERSION}" = "1" ; then

   TMP_CFLAGS=$CFLAGS 
   CFLAGS="$CFLAGS $XML_CFLAG_DEFINES $XML_INC_DIRS"
   echo "Need to check if old-style struct fields in effect (i.e. childs or children)."
   AC_TRY_COMPILE([
   #include <libxml/parser.h>
   ],[
      xmlNodePtr node;
      node->childs == NULL;
   ],[XML_CFLAG_DEFINES="${XML_CFLAG_DEFINES} -DXML_USE_CHILDS=1"; echo "Need to use childs!"],[echo "New style libxml!"])

   CFLAGS=$TMP_CFLAGS
  fi
fi

MV=mv

if test "${enable_embed}" = "yes" ; then
   EMBED_LIB="lib/libggobi.${SHLIB_EXT}"
fi



dnl At this point, we have done most of the system-specific computations
dnl and are ready to start exporting the variables to be used in the different
dnl compilation and executable scripts.

GGOBI_ROOT=`pwd`
AC_SUBST(GGOBI_ROOT)

AC_SUBST(EMBED_LIB)

AC_SUBST(MV)

AC_SUBST(TOP_DIR)

AC_SUBST(UNAME)

AC_SUBST(USE_XML)
AC_SUBST(XML_CFLAG_DEFINES)


if test -n "${USE_XML}" ; then
  SUPPORTS_XML="yes"
else
  SUPPORTS_XML="no"
fi

AC_SUBST(SUPPORTS_XML)

AC_SUBST(XML_SRC)


AC_SUBST(XML_INC_DIRS)
AC_SUBST(XML_LIB_DIRS)
AC_SUBST(XML_LIB_DIRS_PATH)



AC_SUBST(GGOBI_HOME)
AC_SUBST(GGOBI_INSTALL_HOME)

AC_SUBST(INSTALL_DIR)

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(PATCH_LEVEL)

AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

if test -n "${enable_debug}" && ! test "${enable_debug}" = "no" ;  then
 SRC_DEBUG="-g"
fi
AC_SUBST(SRC_DEBUG)

if test -n "${EMBED_LIB}" ; then
   INSTALL_SRC_LIBS="-L${INSTALL_DIR}/lib -lggobi"
fi

AC_SUBST(INSTALL_SRC_LIBS)
AC_SUBST(INSTALL_SRC_CFLAGS)

AC_SUBST(PIC_CFLAG)
AC_SUBST(LDFLAGS)
AC_SUBST(SHLIB_LDFLAGS)
AC_SUBST(LO_DIR)

AC_SUBST(OS_INFO)
AC_SUBST(GGOBI_VERSION_STRING)
AC_SUBST(GGOBI_RELEASE_DATE)

AC_SUBST(EXE_EXT)

 dnl These go into config.h as #define entries.
AC_DEFINE_UNQUOTED(GGOBI_VERSION_STRING, "$GGOBI_VERSION_STRING")
AC_DEFINE_UNQUOTED(GGOBI_RELEASE_DATE, "$GGOBI_RELEASE_DATE")
AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION)
AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION)
AC_DEFINE_UNQUOTED(PATCH_LEVEL, $PATCH_LEVEL)

AC_CONFIG_HEADER(src/config.h)


if test -n "${ENABLE_ALL_PLUGINS}" && test ${ENABLE_ALL_PLUGINS} -gt 0 ; then
 PLUGIN_DIRS=""
 TMP=`cd plugins ; ls`
 for i in ${TMP}; do
   if test -d plugins/$i ; then
     PLUGIN_DIRS="${PLUGIN_DIRS} $i"
   fi
 done

echo "Plugin directories: $PLUGIN_DIRS"

# PLUGIN_DIRS="ImageLib MySQL Postgres DataViewer FileSelect GraphLayout ggvis Perl R JVM"
fi

dnl if test -n "${PLUGIN_DIRS}" ; then
dnl    PLUGIN_DIRS="${PLUGIN_DIRS}  TestPlugin TestInput"
dnl fi
AC_SUBST(PLUGIN_DIRS)

if test "$prefix" = "NONE" ; then
 INSTALL_DIR=$ac_default_prefix
else
 INSTALL_DIR=$prefix
fi
AC_SUBST(INSTALL_DIR)

if test -n "${PLUGIN_DIRS}" ; then
 echo "Enabling plugins"
 export GGOBI_ROOT

dnl 
dnl AC_CONFIG_SUBDIRS($PLUGIN_DIRS)
dnl might do the same thing. 

 INSTALLABLE_PLUGINS=""
 for p in ${PLUGIN_DIRS} ; do 
   echo

   if ! test -d "plugins/$p" ; then
    echo "No such plugin directory: plugins/$p"
    continue
   fi

   echo "Configuring plugin $p"
   
   if test -r plugins/$p/configure.in && ! test -x plugins/$p/configure; then
      cd plugins/$p
	  echo "Autoconfing plugin $p"
	  aclocal && autoconf
	  cd ../..
   fi
   
   if test -x plugins/$p/configure ; then
      cd plugins/$p 
      ./configure
      ok=$? 
      cd ../..
   else
      ok="0"
   fi
   if test "${ok}" = "0" ; then
     echo "Configured plugin $p"
     INSTALLABLE_PLUGINS="${INSTALLABLE_PLUGINS} $p"
   else
     echo "Failed to configure plugin $p ($ok)"
   fi

   echo

 done 

 PLUGIN_DIRS=$INSTALLABLE_PLUGINS
 echo "Installable plugins: $PLUGIN_DIRS"

fi

 dnl Process the different .in files, substituting the values computed here in the configuration
 dnl script for the corresponding @variable@ in these files.
AC_OUTPUT(Makeconf GNUmakefile src/GNUmakefile bin/setLD.csh bin/setLD.bsh bin/ggobi bin/ggobidb bin/ggobi-config local.config plugin ggobi.pc win32/ggobi.iss PluginList)

dnl cp src/config.h include/GGobiConfig.h

dnl Ensure the resulting ggobi scripts executable.
chmod +x bin/ggobi
chmod +x bin/ggobidb
chmod +x bin/ggobi-config
chmod +x plugin



echo "*******************************"
echo ""
echo "GGobi"
echo " Version:                $GGOBI_VERSION_STRING"
echo " Building ggobi library: $enable_embed"
echo " XML:                    version ${XML_VERSION}"
echo " Gtk:                    version ${GTK_VERSION}"
echo " Plugins:                ${PLUGIN_DIRS}"
echo " Installation directory: $GGOBI_INSTALL_HOME"
echo ""
echo "*******************************"

