# case 3:  the splot is reset because a new display is launched

  turn off the event handlers for the current_splot
  redraw the current splot without a border

  current_splot = new splot
  [turn on the event handlers for current_splot; none in launch state]
  add the border to the current_splot



void
display_new (gpointer cbd, guint action, GtkWidget *widget)
{
  displayd *display;
  splotd *prev_splot = current_splot;

  splot_set_current (current_splot, off);

  switch (action) {
    case 0:
      display = scatterplot_new (false);
      break;
    case 1:
      display = scatmat_new (false);
      break;
    case 2:
      display = parcoords_new (false);
      break;
    case 3:  /*-- scatterplot of missing values --*/
      if (xg.nmissing)
        display = scatterplot_new (true);
      break;
    case 4:  /*-- scatterplot matrix of missing values --*/
      if (xg.nmissing)
        display = scatmat_new (true);
      break;
    default:
      break;
  }

  display_set_current (display);
  displays = g_list_append (displays, (gpointer) display);

  current_splot = (splotd *) g_list_nth_data (current_display->splots, 0);
  splot_set_current (current_splot, on);

  mode_set (current_display->cpanel.mode);  /* don't activate */

  gtk_widget_queue_draw (prev_splot->da);
}

void
splot_set_current (splotd *sp, gboolean state) {
/*
 * Turn on or off the event handlers in sp
*/
  if (sp != null) {
    displayd *display = (displayd *) sp->displayptr;
    cpaneld *cpanel = &display->cpanel;

    sp_event_handlers_toggle (sp, state);
    mode_activate (sp, cpanel->mode, state);
    mode_submenus_activate (sp, cpanel->mode, state);
  }
}

void 
mode_set (gint m) {
  displayd *display = current_display;

  mode = m;
  if (mode != prev_mode) {
    /* Add a reference to the widget so it isn't destroyed */
    gtk_widget_ref (control_panel[prev_mode]);
    gtk_container_remove (GTK_CONTAINER (mode_frame),
                          control_panel[prev_mode]);
  
    gtk_frame_set_label (GTK_FRAME (mode_frame), mode_name[mode]);
    gtk_container_add (GTK_CONTAINER (mode_frame), control_panel[mode]);
  }
  if (display->displaytype == scatterplot) {
    if (mode <= COTOUR)
      projection = display->cpanel.projection = mode;

    if (projection != prev_projection) {
      scatterplot_show_rulers (display, projection);
      prev_projection = projection;
    }
  }

  prev_mode = mode;
  varpanel_refresh ();
}

