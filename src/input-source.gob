%h{
  #include <gsf/gsf.h>
%}
%{
  #include "ggobi-input-decoder.h"
%}
class GGobi:Input:Source from G:Object (abstract) {

  private gchar *uri destroywith g_free;
  property STRING uri 
    (nick = "URI", blurb = "URI identifying this data source", link, export);
  private gchar *logical_mode destroywith g_free;
  property STRING logical_mode 
    (nick = "user mode", blurb = "The high-level format of the data", 
      link, export);
  private gchar *physical_mode destroywith g_free;
  property STRING physical_mode 
    (nick = "system mode", blurb = "The low-level format of the data", 
      link, export);
  private gchar *display_name destroywith g_free;
  property STRING display_name 
    (nick = "name", blurb = "The user visible name of this data source", export)
    set {
      char *old = selfp->display_name; 
      selfp->display_name = g_value_dup_string (VAL); 
      g_free (old);
    } /* return basename of URI if no display name specified */
    get {
      if (selfp->display_name)
        g_value_set_string(VAL, selfp->display_name); /* take gives ownership */
      else g_value_take_string(VAL, g_path_get_basename(selfp->uri));
    };
      
  public GsfInput *
  get_input(self, GError **error) {
    GsfInput *decoded, *input = self_get_raw_input(self, error);
    GType *decoder_types;
    gint n_types, i;
    
    if (input == NULL)
      return NULL;
    
    decoder_types = g_type_children(GGOBI_TYPE_INPUT_DECODER, &n_types);
    do {
      decoded = NULL;
      for (i = 0; i < n_types; i++) {
        GObject *decoder = g_object_new(decoder_types[i], NULL);
        decoded = ggobi_input_decoder_decode(GGOBI_INPUT_DECODER(decoder), input);
        if (decoded) {
          g_object_unref(input);
          input = decoded;
        }
        g_object_unref(decoder);
      }
    } while(decoded);
    
    return input;
  }
  
  /* implementation of this is optional, but necessary if one wishes to 
     provide a GsfInput via get_input() */
  virtual GsfInput *
  get_raw_input(self, GError **error);
}
