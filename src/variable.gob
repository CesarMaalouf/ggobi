%h{
  #include "types.h"
  
  #define GGOBI_VARIABLE_IS_CATEGORICAL(var) \
    (ggobi_variable_get_vartype((var)) == GGOBI_VARIABLE_CATEGORICAL)
  
  /* we now allow implicit name transformation by GGobiVariable */
  typedef gchar * (*GGobiVariableNameTransformFunc) (const gchar *name, gpointer data);
  
  /* this trick lets us use GGobiStage without including ggobi-stage.h,
      which would introduce a circular dependency
  */
  #ifndef __TYPEDEF_GGOBI_STAGE__
  #define __TYPEDEF_GGOBI_STAGE__
  typedef struct _GGobiStage GGobiStage;
  #endif
%}

%{
  #include "ggobi-stage.h"
  #include "vars.h"
  #include "externs.h"
  #include <math.h>
  /* for qsort */
  #include <stdlib.h>
  
  typedef struct level_s {
    guint index;
    guint count;
    gint value;
    gchar *name;
  } level_t;
  
  static void
  value_collector_func(gpointer key, gpointer value, gpointer data)
  {
    gint **array = (gint **)data;
    (*array)[0] = GPOINTER_TO_INT(key);
    (*array)++;
  }
  static void
  level_count_clear_func(gpointer key, gpointer value, gpointer data)
  {
    level_t *l = (level_t *)value;
    l->count = 0;
  }
%}

enum GGOBI_VARIABLE {
  REAL, CATEGORICAL, INTEGER, COUNTER, UNIFORM, ALL_VARTYPES
} GGobi:Variable:Type;

/* This is meant to encapsulate per-column attributes in the Gobi pipeline.
 It simplifies the per-column GGobiStage API and offers the conveniences of 
 GObject for each column. The GGobiVariable is a essentially a utility for
 GGobiStage. Thus, the direction of control is from GGobiStage to GGobiVariable.
 The GGobiVariable maintains a reference to its GGobiStage, but it does not 
 initiate any transactions with GGobiStage. The GGobiStage registers 
 signal handlers to track the effects of GGobiVariable setter invocations
 and explicitly invokes ggobi_variable_update() upon changes in the data at 
 the GGobiVariable's column.
*/
class GGobi:Variable from G:Object {
protected GGobiStage *stage; /* stage to which this variable belongs */
property OBJECT stage
(nick = "GGobiStage", blurb = "The stage to which this variable belongs",
 object_type = GGobi:Stage, flags = CONSTRUCT_ONLY, link);
 
/* ways to identify this variable */
public gchar *name destroywith g_free;
private gchar *nickname destroywith g_free; 
property STRING name
(nick = "id", blurb = "The name of this variable",
  flags = CONSTRUCT, default_value = "_X_", export)
get { g_value_set_string (VAL, self->name); }
set {
  gchar *name, *nick, *old = self->name;
  const gchar *tmp_name = g_value_get_string (VAL);
  if (selfp->name_transform_func)
    name = selfp->name_transform_func(tmp_name, 
      selfp->transform_user_data);
  else name = g_strdup(tmp_name);
  self->name = name;
  nick = g_strndup(tmp_name, 2); /* prefix of untransformed name */
  self_set_nickname(self, nick);
  self_name_changed(self, old, tmp_name);
  g_free (old);
  g_free (nick);
};
property STRING nickname
(nick = "alias", blurb = "The alias for this variable",
 default_value = "X", link, export);
 
private GGobiVariableType vartype; 
property ENUM vartype
(nick = "class", blurb = "The type of this variable",
 enum_type = GGobi:Variable:Type, default_value = GGOBI_VARIABLE_REAL, 
 link, export);

private gdouble default_value = 0;
property DOUBLE default_value
(nick = "default", blurb = "The default value for a field of this variable",
  default_value = 0, minimum = GGOBI_NEG_MAXDOUBLE, maximum = G_MAXDOUBLE, 
  link, export);

public gboolean is_attribute = false;
property BOOLEAN is_attribute
(nick = "is_attr", blurb = "Is this variable an attribute",
  default_value = false, link, export);

/* In order to make transforming column names more convenient, the base
  GGobiVariable class accepts a name transformation function at construction
  time, which makes it unnecessary to extend GGobiVariable to change the name.
  */
private GGobiVariableNameTransformFunc name_transform_func;
private gpointer transform_user_data;

/* provides the old name for listeners that know the variable by its name */
/* also gives the raw (untransformed) name for passing up the pipeline */
private signal NONE (STRING, STRING) void 
  name_changed(self, const gchar *old_name, const gchar *raw_name);

/* PIPELINE STUFF */

// User limits are broken/deprecated - will go away as soon as alternative exists
public lims lim_specified;   /*user specified*/
public gboolean lim_specified_p;

/* END PIPELINE */

/*-- categorical stuff --*/
/*-- fast mapping from names and values to indices --*/
private GHashTable *name_to_level = { g_hash_table_new(g_str_hash, g_str_equal) }
  destroywith g_hash_table_destroy;
private GHashTable *value_to_level = { g_hash_table_new(NULL, NULL) }
  destroywith g_hash_table_destroy;

private lims lim;             /* limits for this variable */
private lims lim_display;     /*for vartable, sans missings*/
private gfloat variance;
private gfloat mean;
private gfloat median;
private gboolean has_missings;

/* dirty flags */
private gboolean dirty_has_missings = TRUE;
private gboolean dirty_levels = TRUE;
private gboolean dirty_stats = TRUE;
private gboolean dirty_limits = TRUE;

private level_t *
get_level_for_value(self, gint value)
{
  gpointer key;
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
  self_maybe_update_levels(self);
  if(!g_hash_table_lookup_extended(selfp->value_to_level, GINT_TO_POINTER(value), 
    &key, (gpointer)&level))
      return(NULL);
  return(level);
}

private level_t *
get_level_for_name(self, const gchar *name)
{
  gpointer key;
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
  self_maybe_update_levels(self);
  if (!g_hash_table_lookup_extended(selfp->name_to_level, name, &key, 
      (gpointer)&level))
    return(NULL);
  return(level);
}

/* Every variable must be associated with the same stage for its lifetime */
  /**
   * new:
   * @stage: the stage to which this variable belongs.
   *
   * Creates the variable and attaches it to the given stage. This relationship
   * must last for the lifetime of the #GGobiVariable.
   *
   * Returns: new #GGobiVariable
   */
public GGobiVariable *
new(GGobiStage *stage)
{
  GObject *o = (GObject *)GET_NEW_VARG("stage", stage, NULL);
  return(GGOBI_VARIABLE(o));
}

  /**
   * set_name_transform_func:
   * @self: a #GGobiVariable
   * @func: function used for transforming the name of this variable.
   *
   * This allows the client to specify a function that transforms the name
   * of this variable. This is useful, for example, when a variable is
   * transformed and the name needs to indicate the transformation, 
   * like "Log(X)" for variable "X".
   *
   */
public void
set_name_transform_func(self, GGobiVariableNameTransformFunc func,
  gpointer user_data)
{ // FIXME: this needs to call an update of its name
  selfp->name_transform_func = func;
  selfp->transform_user_data = user_data;
}

/**
* get_col_n_levels:
* @self: categorical #GGobiStage object
* @j: column index
*
* Get number of levels in a categorical variable
**/
public guint
get_n_levels(self)
{
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);  
  self_maybe_update_levels(self);
  return(g_hash_table_size(selfp->name_to_level));
}

  /**
   * get_level_name:
   * @self: a categorical #GGobiVariable
   * @value: the value of the level.
   *
   * Get the name of the level with the given value.
   *
   * Returns: name of the level
   */
public const gchar* 
get_level_name(self, gint value)
{
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
  
  level = self_get_level_for_value(self, value);
  g_return_val_if_fail(level != NULL, NULL);
  
  return level->name;
}

  /**
   * get_level_value:
   * @self: a categorical #GGobiVariable
   * @name: Name of the level.
   *
   * Get the value for the level with the given name.
   *
   * Returns: Value for the level.
   */
public gint
get_level_value(self, const gchar *name) {
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);
  
  level = self_get_level_for_name(self, name);
  g_return_val_if_fail(level != NULL, 0);
  
  return level->value;
}

  /**
   * get_level_count:
   * @self: a categorical #GGobiVariable
   * @value: the level value
   *
   * Get the number of values with the given level.
   *
   * Returns: #guint
   */
public guint  
get_level_count(self, gint value)
{
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);
  
  level = self_get_level_for_value(self, value);
  g_return_val_if_fail(level != NULL, 0);  

  return(level->count);
}

  /**
   * get_level_values:
   * @self: a categorical #GGobiVariable
   *
   * Gets the values of each level.
   *
   * Returns: allocated array of integer level values.
   */
public gint *
get_level_values(self)
{
  gint *values, *tmp;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
  
  self_maybe_update_levels(self);
  
  tmp = values = g_new(gint, self_get_n_levels(self));
  
  g_hash_table_foreach(selfp->value_to_level, value_collector_func, &tmp);
  
  return(values);
}

  /**
   * get_level_index:
   * @self: a #GGobiVariable
   * @value: level value
   *
   * Gets the index of the level with the value. Useful for some algorithms.
   *
   * Returns: level index
   */
public gint
get_level_index(self, gint value)
{
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), FALSE);
  level = self_get_level_for_value(self, value);
  return(level ? level->index : -1);
}
  /**
   * get_level_index_for_name:
   * @self: a #GGobiVariable
   * @name: name of the level
   *
   * Gets the level index for the level with the given name.
   *
   * Returns: level index
   */
public gint
get_level_index_for_name(self, const gchar *name)
{
  level_t *level;
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), FALSE);
  level = self_get_level_for_name(self, name);
  return(level ? level->index : -1);
}
  
  /**
   * has_level:
   * @self: a #GGobiVariable
   * @value: level value
   *
   * Whether a level exists with the given value.
   *
   * Returns: %TRUE if the level exists.
   */
public gboolean
has_level(self, gint value)
{
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), FALSE);
  return(self_get_level_for_value(self, value) != NULL);
}

  /**
   * has_level_for_name:
   * @self: a #GGobiVariable
   * @name: level name
   *
   * Whether a level exists with the given name.
   *
   * Returns: %TRUE if the level exists.
   */
public gboolean
has_level_for_name(self, const gchar *name)
{
  g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), FALSE);
  return(self_get_level_for_name(self, name) != NULL);
}

/**
* get_level_value_closest: 
* @self: #GGobiVariable object
* @value: target value to search for 
*
* Get closest level value
* For a categorical categorical, this searches through all level
* values and returns the level value that is closest to the desired
* value.  Currently seems a little buggy in that it prefers one 
* direction over another
*
* Returns: closest level value to target value
*
**/
public gint  
get_level_value_closest(self, gint value)
{
 gint *level_values;
 guint k, level = 0, dist = 0, ddist = G_MAXUINT;
 gint closest;
 
 g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);

 level_values = self_get_level_values(self);
 
 for (k = 0; k < ggobi_variable_get_n_levels(self); k++) {
   dist = fabs ((greal) level_values[k] - value);
   if (dist < ddist) {
     level = k;
     ddist = dist;
   }
 }

 closest = level_values[level];
 g_free(level_values);
 
 return closest;
}

/**
 * limits_adjust:
 * @min: minimum value
 * @max: maximumum value
 *
 * Adjusts limits so that:
 *   1) if they are equal, they are separated by 20%, unless they are zero,
 *      in which case they become [-1.0, 1.0]
 *   2) the lesser one is the min
 *
 */
private void
limits_adjust (greal * min, greal * max)
{
  if (*max - *min == 0) {
    if (*min == 0.0) {
      *min = -1.0;
      *max = 1.0;
    }
    else {
      *min = 0.9 * *min;
      *max = 1.1 * *max;
    }
  }

  if (*max < *min) {
    greal ftmp = *max;
    *max = *min;
    *min = ftmp;
  }
}

private void
refresh_limits(self)
{    
  GGobiStage *s = self->stage;
  gint i, j = ggobi_stage_get_col_index_for_name(s, self->name);
  greal min, max;
  
  if (!selfp->dirty_limits)
    return;
  
  min = G_MAXFLOAT;
  max = -G_MAXFLOAT;
    
  if (!GGOBI_VARIABLE_IS_CATEGORICAL(self)) {
    for (i = 0; i < s->n_rows; i++) {
      if (!s->missings_show_p && ggobi_stage_is_missing(s, i,j));
      else {
        if (ggobi_stage_get_raw_value(s, i, j) < min)
          min = ggobi_stage_get_raw_value(s, i, j);
        if (ggobi_stage_get_raw_value(s, i, j) > max)
          max = ggobi_stage_get_raw_value(s, i, j);
      }
    }
  } else {
    guint level_value;
    gint *level_values;
    gint nlevels;
    if ((nlevels = self_get_n_levels(self)) > 0) {
      level_values = self_get_level_values(self);
      for (i = 0; i < nlevels; i++) {
        level_value = level_values[i];
        if (level_value < min)
          min = level_value;
        if (level_value > max)
          max = level_value;
      }
      g_free(level_values);
    }
  }
  
  self_limits_adjust(&min, &max);
  
  selfp->lim.min = min;
  selfp->lim.max = max;
  selfp->lim_display.min = selfp->has_missings ? MIN(0, min) : min;
  selfp->lim_display.max = selfp->has_missings ? MAX(0, max) : max;
  
  selfp->dirty_limits = FALSE;
}

/**
* get_max:
* @self: #GGobiStage object
* 
* Find the biggest value in the column.
*
* Returns: the maximum value.
**/
public gfloat
get_max(self)
{
  self_refresh_limits(self);
  return(gfloat) selfp->lim.max;
}

/**
* get_col_min:
* @self: #GGobiStage object
* 
* Find the smallest value in the column.
*
* Returns: the minimum value.
**/
public gfloat
get_min(self)
{
  self_refresh_limits(self);
  return(gfloat) selfp->lim.min;
}

  /**
   * get_display_max:
   * @self: a #GGobiVariable
   *
   * Gets the maximum, excluding missings. Temporary function.
   *
   * Returns: maximum value, not counting missings.
   */
public gfloat
get_display_max(self)
{
  self_refresh_limits(self);
  return(gfloat) selfp->lim_display.max;
}

  /**
   * get_display_min:
   * @self: a #GGobiVariable
   *
   * Gets the minimum, excluding missings. Temporary function.
   *
   * Returns: minimum value, not counting missings
   */
public gfloat
get_display_min(self)
{
  self_refresh_limits(self);
  return(gfloat) selfp->lim_display.min;
}

  /**
   * get_limits:
   * @self: a #GGobiVariable
   * @min: return location for minimum
   * @max: return location for maximum
   *
   * Gets the minimum and maximum simultaneously.
   *
   */
public void
get_limits(self, gfloat *min, gfloat *max)
{
  *min = self_get_min(self);
  *max = self_get_max(self);
}

  /**
   * get_range:
   * @self: a #GGobiVariable
   *
   * 
   *
   * Returns: The difference between the maximum and minimum.
   */
public gfloat
get_range(self)
{
  // FIXME: Make work for categorical variables
  return selfp->lim.max - selfp->lim.min;
}

private void
refresh_stats(self)
{
  guint n_row = self->stage->n_rows;
  if (!selfp->dirty_stats)
    return;
  gfloat sum_squares = 0, sum = 0;
  guint i, j = ggobi_stage_get_col_index_for_name(self->stage, self->name);
  gfloat *x = g_new(gfloat, n_row);
  for (i = 0; i < n_row; i++) {
    x[i] = ggobi_stage_get_raw_value(self->stage, i, j); 
    sum_squares = sum_squares + (x[i] * x[i]);
    sum += x[i];
  }
  selfp->mean = sum / n_row;
  selfp->variance = (sum_squares / n_row) - (selfp->mean * selfp->mean);
  if (n_row) {
    qsort(x, n_row, sizeof (gfloat), fcompare);
    selfp->median = ((n_row % 2) != 0) ? x[(n_row - 1) / 2] : 
      (x[n_row / 2 - 1] + x[n_row / 2]) / 2.;
    g_free(x);
  } else selfp->median = selfp->mean; /* NaN */
  selfp->dirty_stats = FALSE;
}

  /**
   * get_mean:
   * @self: a #GGobiVariable
   *
   *
   *
   * Returns: the mean
   */
public gfloat
get_mean(self)
{
  self_refresh_stats(self);
  return selfp->mean;
}

  /**
   * get_median:
   * @self: a #GGobiVariable
   *
   *
   *
   * Returns: the median
   */
public gfloat
get_median(self)
{
  self_refresh_stats(self);
  return selfp->median;
}

  /**
   * get_variance:
   * @self: a #GGobiVariable
   *
   *
   *
   * Returns: the variance
   */
public gfloat
get_variance(self)
{
  self_refresh_stats(self);
  return selfp->variance;
}

  /**
   * has_missings:
   * @self: a #GGobiVariable
   *
   *
   *
   * Returns: %TRUE if this variable has missing values.
   */
public gboolean
has_missings(self)
{
  if (selfp->dirty_has_missings) {
    gboolean missings = FALSE;
    gint j = ggobi_stage_get_col_index_for_name(self->stage, self->name);
    for (guint i = 0; i < self->stage->n_rows && !missings; i++)
      missings = ggobi_stage_is_missing(self->stage, i, j);
    selfp->dirty_has_missings = FALSE;
    selfp->has_missings = missings;
  }
  
  return selfp->has_missings;
}

  /**
   * clone:
   * @self: a #GGobiVariable
   *
   * Makes a copy of this variable.
   *
   * Returns: clone of this variable.
   */
public GGobiVariable*
clone(self)
{
  GGobiVariable *self_new = GGOBI_VARIABLE(g_object_new(G_TYPE_FROM_INSTANCE(self),
    "name", self->name, "nickname", selfp->nickname, "stage", self->stage, NULL));
 
  self_set_vartype(self_new, self_get_vartype(self));
  if (GGOBI_VARIABLE_IS_CATEGORICAL(self)) {
    gint *values = self_get_level_values(self);
    for (gint k=0; k < self_get_n_levels(self); k++) {
      level_t *level;
      self_add_level(self_new, self_get_level_name(self, values[k]), values[k]);
      /* this part is a bit ugly */
      level = self_get_level_for_value(self_new, values[k]);
      level->count = self_get_level_count(self, values[k]);
    }
    g_free(values);
  }
 
  self_new->_priv->mean = self_get_mean(self);
  self_new->_priv->median = self_get_median(self);
  self_new->_priv->lim.min = self_get_min(self);
  self_new->_priv->lim.max = self_get_max(self);

  self_new->_priv->lim_display.min = selfp->lim_display.min;
  self_new->_priv->lim_display.max = selfp->lim_display.max;

  self_new->lim_specified_p = self->lim_specified_p;

  return self_new;
}

/* adds an instance (increases the count) for a level with the given value
  if a level with that value does not exist and name is non-NULL,
  then a new level is added */
private void
add_level_instance(self, const gchar *name, gint value)
{
  level_t *level = self_get_level_for_value(self, value);
  if (!level && name)
    self_add_level(self, name, value);
  else if (level)
    level->count++;
}

/**
* add_level:
* @self: #GGobiStage object
* @name: character description of level, if NULL uses value
* @value: level value, if -1 uses index + 1
*
* Adds a level to a categorical variable.
*
* Returns: index of new level
**/
public guint
add_level(self, const gchar *name, gint value)
{
 level_t *level;
 guint n_levels;
 
 /* coerce to categorical */
 self_set_vartype(self, GGOBI_VARIABLE_CATEGORICAL);

 if (value == -1 && self_has_level_for_name(self, name))
   return self_get_level_index_for_name(self, name);
 if (value >= 0 && self_has_level(self, value))
   return self_get_level_index(self, value);

 n_levels = self_get_n_levels(self);
 
 level = g_new(level_t, 1);

 level->index = n_levels;
 level->count = 1;

 if (value == -1)
   value = n_levels + 1;
 level->value = value;

 if (!name)
   level->name = g_strdup_printf("%d", value);
 else 
   level->name = g_strdup(name);

 g_hash_table_insert(selfp->name_to_level, level->name, level);
 g_hash_table_insert(selfp->value_to_level, GINT_TO_POINTER(level->value), level);

 /* default value becomes the first level */
 if (n_levels == 0)
   self_set_default_value(self, (gdouble)level->value);
 
 return n_levels;
}

  /**
   * update:
   * @self: a #GGobiVariable
   *
   * Force this variable to update its statistics.
   *
   */
public void
update(self)
{
 /* make a dirty flag for each statistic and set to TRUE here */
 /* may collapse some dirty flags for simplicity */
 
 selfp->dirty_has_missings = TRUE;
 selfp->dirty_levels = TRUE;
 selfp->dirty_stats = TRUE;
 selfp->dirty_limits = TRUE;
}

private void
maybe_update_levels(self)
{
  /* Not sure if lazy caching is worth the trouble for these levels */
  gint j;
  guint n;
   
  if (!selfp->dirty_levels)
    return;
  selfp->dirty_levels = FALSE;
  
  j = ggobi_stage_get_col_index_for_name(self->stage, self->name);
  n = ggobi_stage_get_n_rows(self->stage);
  
  g_hash_table_foreach(selfp->name_to_level, level_count_clear_func, NULL);
  
  for (guint i = 0; i < n; i++) {
    if (!ggobi_stage_is_missing(self->stage, i, j))
      /* if the categorical value is NULL, then we assume the value does not
         correspond to a valid level and so it is not counted */
      self_add_level_instance(self, ggobi_stage_get_categorical_value(self->stage, i, j), 
        (gint)ggobi_stage_get_raw_value(self->stage, i, j));
  }
}
}
