%h{
  #include "types.h"
  #include <math.h>
  
  /* move to categorical subclass? */
  typedef struct level_s {
    gint count;
    gint value;
    gchar *name;
  } level_t;
  
  /* shortcut that would not be necessary with a categorical class */
  #define GGOBI_VARIABLE_IS_CATEGORICAL(var) \
    ggobi_variable_get_vartype((var)) == GGOBI_VARIABLE_CATEGORICAL
  
  /* we now allow implicit name transformation by GGobiVariable */
  typedef gchar * (*GGobiVariableNameTransformFunc) (const gchar *name, gpointer data);
  
  /* had to typedef this stuff so that gob could parse it */
  typedef gfloat (*GGobiDomainAdjFunc) (gfloat x, gfloat incr);
  typedef gfloat (*GGobiInvDomainAdjFunc) (gfloat x, gfloat incr);
  
  /* this trick lets us use GGobiStage without including ggobi-stage.h,
      which would introduce a circular dependency
  */
  #ifndef __TYPEDEF_GGOBI_STAGE__
  #define __TYPEDEF_GGOBI_STAGE__
  typedef struct _GGobiStage GGobiStage;
  #endif
%}

%{
  #include "ggobi-stage.h"
  #define GGOBI_SMALLEST_DOUBLE -G_MAXDOUBLE /* get past the GOB parser */
  
  static void
  value_collector_func(gpointer key, gpointer value, gpointer data)
  {
    gint **array = (gint **)data;
    (*array)[0] = GPOINTER_TO_INT(key);
    (*array)++;
  }
  static void
  level_count_clear_func(gpointer key, gpointer value, gpointer data)
  {
    level_t *l = (level_t *)value;
    l->count = 0;
  }
  
  extern gfloat no_change (gfloat, gfloat);
%}

enum GGOBI_VARIABLE {
  REAL, CATEGORICAL, INTEGER, COUNTER, UNIFORM, ALL_VARTYPES
} GGobi:Variable:Type;

/* This is meant to encapsulate per-column attributes in the Gobi pipeline.
   It simplifies the per-column GGobiData API and offers the conveniences of 
   GObject for each column. The GGobiVariable is a essentially a utility for
   GGobiData. Thus, the direction of control is from GGobiData to GGobiVariable.
   The GGobiVariable maintains a reference to its GGobiStage, but it does not 
   initiate any transactions with GGobiStage. The GGobiStage registers 
   signal handlers to track the effects of GGobiVariable setter invocations
   and explicitly invokes ggobi_variable_update() upon changes in the data at 
   the GGobiVariable's column.
*/
class GGobi:Variable from G:Object {
  protected GGobiStage *stage; /* stage to which this variable belongs */
  property OBJECT stage
  (nick = "GGobiStage", blurb = "The stage to which this variable belongs",
   object_type = GGobi:Stage, flags = CONSTRUCT_ONLY, link);
   
  /* ways to identify this variable */
  protected gchar *name destroywith g_free;
  private gchar *nickname destroywith g_free; 
  property STRING name
  (nick = "id", blurb = "The name of this variable",
  default_value = "_X_", export)
  get { g_value_set_string (VAL, self->name); }
  set {
    // FIXME: for some reason the default value 'X' is not being set
    // This is a bug in something.
    gchar *name, *nick, *old = self->name;
    const gchar *tmp_name = g_value_get_string (VAL);
    if (self->_priv->name_transform_func)
      name = self->_priv->name_transform_func(tmp_name, 
        self->_priv->transform_user_data);
    else name = g_strdup(tmp_name);
    self->name = name;
    nick = g_strndup(tmp_name, 2); /* prefix of untransformed name */
    self_set_nickname(self, nick);
    self_name_changed(self, old, tmp_name);
    g_free (old);
    g_free (nick);
  };
  property STRING nickname
  (nick = "alias", blurb = "The alias for this variable",
   default_value = "X", link, export);
   
  // FIXME: we will likely move to a type hierarchy to encode this
  private GGobiVariableType vartype; 
  property ENUM vartype
  (nick = "class", blurb = "The type of this variable",
   enum_type = GGobi:Variable:Type, default_value = GGOBI_VARIABLE_REAL, 
   link, export);
   
  private gdouble default_value = 0;
  property DOUBLE default_value
  (nick = "default", blurb = "The default value for a field of this variable",
    default_value = 0, minimum = GGOBI_SMALLEST_DOUBLE, maximum = G_MAXDOUBLE, link, export);

  /* In order to make transforming column names more convenient, the base
    GGobiVariable class accepts a name transformation function at construction
    time, which makes it unnecessary to extend GGobiVariable to change the name.
    */
  private GGobiVariableNameTransformFunc name_transform_func;
  private gpointer transform_user_data;

  /* provides the old name for listeners that know the variable by its name */
  /* also gives the raw (untransformed) name for passing up the pipeline */
  private signal NONE (STRING, STRING) void 
    name_changed(self, const gchar *old_name, const gchar *raw_name);
  
  /* PIPELINE STUFF */
  public lims lim_raw;         /* raw data*/
  public lims lim_tform;       /*transformed data*/
  public lims lim_display;     /*for vartable, transformed sans missings*/
  public lims lim_specified;   /*user specified*/
  public lims lim_specified_tform;
  public gboolean lim_specified_p;
  
  public gint tform0;
  public gfloat domain_incr;  /*-- stage 0 --*/
  public GGobiDomainAdjFunc domain_adj = { no_change };
  public GGobiInvDomainAdjFunc inv_domain_adj = { no_change };
  public gint tform1;
  public gfloat param;
  public gint tform2;
  
  /*-- jittering --*/
  public gfloat jitter_factor;
  
  /* END PIPELINE */
  
  /*-- categorical stuff --*/
  /*-- fast mapping from names and values to indices --*/
  private GHashTable *name_to_level = { g_hash_table_new(g_str_hash, g_str_equal) }
    destroywith g_hash_table_destroy;
  private GHashTable *value_to_level = { g_hash_table_new(NULL, NULL) }
    destroywith g_hash_table_destroy;
  
    // FIXME: these should be made private after pipeline in place
  public lims lim;             /* limits for this variable */
  public gfloat mean;
  public gfloat median;
  private gboolean has_missings;
  
  /* dirty flags */
  private gboolean dirty_has_missings = TRUE;
  
  protected level_t *
  get_level_for_value(self, gint value)
  {
    gpointer key;
    level_t *level;
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
    if(!g_hash_table_lookup_extended(self->_priv->value_to_level, GINT_TO_POINTER(value), 
      &key, (gpointer)&level))
        return(NULL);
    return(level);
  }
  
  protected level_t *
  get_level_for_name(self, const gchar *name)
  {
    gpointer key;
    level_t *level;
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
    if (!g_hash_table_lookup_extended(self->_priv->name_to_level, name, &key, 
        (gpointer)&level))
      return(NULL);
    return(level);
  }
  
  /* Every variable must be associated with the same stage for its lifetime */
  public GObject *
  new(GGobiStage *stage)
  {
    // FIXME: I shouldn't have to specify the 'name' property here but the
    // default_value in the property isn't working
    GObject *o = G_OBJECT(GET_NEW_VARG("stage", stage, "name", "_X_", NULL));
    return(o);
  }
  
  public void
  set_name_transform_func(self, GGobiVariableNameTransformFunc func,
    gpointer user_data)
  {
    self->_priv->name_transform_func = func;
    self->_priv->transform_user_data = user_data;
  }
  
  /**
  * get_col_n_levels:
  * @self: #GGobiStage object
  * @j: column index
  *
  * Get number of levels in a categorical variable
  **/
  public guint
  get_n_levels(self)
  {
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);  

    return(g_hash_table_size(self->_priv->name_to_level));
  }
  
  public gchar* 
  get_level_name(self, gint value)
  {
    level_t *level;
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
    
    level = self_get_level_for_value(self, value);
    g_return_val_if_fail(level != NULL, NULL);
    
    return g_strdup(level->name);
  }
  
  public gint
  get_level_value(self, const gchar *name) {
    level_t *level;
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);
    
    level = self_get_level_for_name(self, name);
    g_return_val_if_fail(level != NULL, 0);
    
    return level->value;
  }

  public guint  
  get_level_count(self, gint value)
  {
    level_t *level;
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);
    
    level = self_get_level_for_value(self, value);
    g_return_val_if_fail(level != NULL, 0);  

    return(level->count);
  }
  
  public gint *
  get_level_values(self)
  {
    gint *values, *tmp;
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), NULL);
    
    tmp = values = g_new(gint, self_get_n_levels(self));
    
    g_hash_table_foreach(self->_priv->value_to_level, value_collector_func, &tmp);
    
    return(values);
  }
  
  public gboolean
  has_level(self, gint value)
  {
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), FALSE);
    return(self_get_level_for_value(self, value) != NULL);
  }
  
  public gboolean
  has_level_for_name(self, const gchar *name)
  {
    g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), FALSE);
    return(self_get_level_for_name(self, name) != NULL);
  }
  
  /**
  * get_level_value_closest: 
  * @self: #GGobiVariable object
  * @value: target value to search for 
  *
  * Get closest level value
  * For a categorical categorical, this searches through all level
  * values and returns the level value that is closest to the desired
  * value.  Currently seems a little buggy in that it prefers one 
  * direction over another
  *
  * Returns: closest level value to target value
  *
  **/
 public gint  
 get_level_value_closest(self, gint value)
 {
   gint *level_values;
   guint k, level = 0, dist = 0, ddist = G_MAXUINT;
   gint closest;
   
   g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);

   level_values = self_get_level_values(self);
   
   for (k = 0; k < ggobi_variable_get_n_levels(self); k++) {
     dist = fabs ((greal) level_values[k] - value);
     if (dist < ddist) {
       level = k;
       ddist = dist;
     }
   }

   closest = level_values[level];
   g_free(level_values);
   
   return closest;
 }

 /**
  * get_max:
  * @self: #GGobiStage object
  * 
  * Find the biggest value in the column.
  * For numerical columns, value is cached by limits_set()
  * Does the right thing for categorical variables too.  
  **/
  public gfloat
  get_max(self)
  {
    gint *level_values;
    guint level_value, nlevels, level_value_max=G_MININT, i;

    if (self_get_vartype(self) != GGOBI_VARIABLE_CATEGORICAL) {
      return self->lim.max;
    }

    // FIXME: Please cache me
    if ((nlevels = self_get_n_levels(self)) > 0) {
      level_values = self_get_level_values(self);
      level_value_max = level_values[0];
      for (i = 0; i < nlevels; i++) {
        level_value = level_values[i];
        if (level_value > level_value_max)
          level_value_max = level_value;
      }
      g_free(level_values);
    }

    return(gfloat) level_value_max;
  }


  /**
  * get_col_min:
  * @self: #GGobiStage object
  * 
  * Find the smallest value in the column.
  * For numerical columns, value is cached by limits_set()
  * Does the right thing for categorical variables too.
  **/
  public gfloat
  get_min(self)
  {
    guint level_value, level_value_min=G_MAXINT, i;
    gint *level_values;
    gint nlevels;
  
    if (!GGOBI_VARIABLE_IS_CATEGORICAL(self)) {
      return self->lim.min;
    }
  
    // FIXME: shouldn't this also be cached?
    if ((nlevels = self_get_n_levels(self)) > 0) {
      level_values = self_get_level_values(self);
      level_value_min = level_values[0];
      for (i = 0; i < nlevels; i++) {
        level_value = level_values[i];
        if (level_value < level_value_min)
          level_value_min = level_value;
      }
      g_free(level_values);
    }
  
    return(gfloat) level_value_min;
  }

  public void
  get_limits(self, gfloat *min, gfloat *max)
  {
    *min = self_get_min(self);
    *max = self_get_max(self);
  }
  
  public gfloat
  get_range(self)
  {
    // FIXME: Make work for categorical variables
    return self->lim.max - self->lim.min;
  }

  public gfloat
  get_mean(self)
  {
    return self->mean;
  }

  public gfloat
  get_median(self)
  {
    return self->median;
  }
  
  public gboolean
  has_missings(self)
  {
    if (self->_priv->dirty_has_missings) {
      gboolean missings = FALSE;
      gint j = ggobi_stage_get_col_index_for_name(self->stage, self->name);
      for (guint i = 0; i < self->stage->n_rows && !missings; i++)
        missings = ggobi_stage_is_missing(self->stage, i, j);
      self->_priv->dirty_has_missings = FALSE;
      self->_priv->has_missings = missings;
    }
    
    return self->_priv->has_missings;
  }
 
 public GGobiVariable*
 clone(self)
 {
   GGobiVariable *self_new = GGOBI_VARIABLE(g_object_new(G_TYPE_FROM_INSTANCE(self),
    "name", self_get_name(self), "nickname", self_get_nickname(self), NULL));
   //self_new->collab_tform = g_strdup (self->_priv->collab_tform);

   self_set_vartype(self_new, self_get_vartype(self));
   if (GGOBI_VARIABLE_IS_CATEGORICAL(self)) {
     gint *values = ggobi_variable_get_level_values(self);
     for (gint k=0; k<self_get_n_levels(self); k++) {
       level_t *level;
       self_add_level(self_new, self_get_level_name(self, values[k]), values[k]);
       /* this part is a bit ugly */
       level = self_get_level_for_value(self_new, values[k]);
       level->count = self_get_level_count(self, values[k]);
     }
     g_free(values);
   }
   
   self_new->mean = self_get_mean(self);
   self_new->median = self_get_median(self);
   self_new->lim.min =
    self_new->lim_raw.min =
    self_new->lim_tform.min = self_get_min(self);
   self_new->lim.max =
    self_new->lim_raw.max =
    self_new->lim_tform.max = self_get_max(self);

   self_new->lim_display.min = self->lim_display.min;
   self_new->lim_display.max = self->lim_display.max;

   self_new->lim_specified_p = self->lim_specified_p;
  
   self_new->tform0 = self->tform0;
   self_new->tform1 = self->tform1;
   self_new->tform2 = self->tform2;
   self_new->domain_incr = self->domain_incr;
   self_new->param = self->param;
   self_new->domain_adj = self->domain_adj;
   self_new->inv_domain_adj = self->inv_domain_adj;
  
   return self_new;
 }
 
  private void
  add_level_instance(self, const gchar *name, gint value)
  {
    level_t *level;
    self_set_vartype(self, GGOBI_VARIABLE_CATEGORICAL);
    if (name)
      level = ggobi_variable_get_level_for_name(self, name);
    else level = ggobi_variable_get_level_for_value(self, value);
    if (level == NULL) {
      self_add_level(self, name, value);
    } else {
      level->count++;
    }
  }
  
 /**
 * add_level:
 * @self: #GGobiStage object
 * @j: column index
 * @name: character description of level, if NULL uses value
 * @value: level value, if -1 uses index + 1
 * Returns: index of new level
 **/
 // FIXME: We may be able to leave this as public. Adding a level does not
 // break consistency with the data (just the metadata).
 public guint
 add_level(self, const gchar *name, gint value)
 {
   level_t *level;
   
   g_return_val_if_fail(GGOBI_VARIABLE_IS_CATEGORICAL(self), 0);
  
   if (value != -1 && self_has_level(self, value))
     return self_get_n_levels(self);
   
   level = g_new(level_t, 1);
  
   level->count = 1;

   if (value == -1)
     value = self_get_n_levels(self) + 1;
   level->value = value;

   if (!name)
     level->name = g_strdup_printf("%d", value);
   else 
     level->name = g_strdup(name);

   g_hash_table_insert(self->_priv->name_to_level, level->name, level);
   g_hash_table_insert(self->_priv->value_to_level, GINT_TO_POINTER(level->value), level);

   return self_get_n_levels(self);
 }
 
 public void
 update(self)
 {
   guint n = ggobi_stage_get_n_rows(self->stage);
   gint j = ggobi_stage_get_col_index_for_name(self->stage, 
    self->name);
   gboolean cat = GGOBI_VARIABLE_IS_CATEGORICAL(self);
   
   // FIXME: make a dirty flag for each statistic and set to TRUE here
   
   self->_priv->dirty_has_missings = TRUE;
   
   // FIXME: the level instances can probably be lazily cached as well.
   if (cat)
     g_hash_table_foreach(self->_priv->name_to_level, level_count_clear_func, NULL);
   
   for (guint i = 0; i < n; i++) {
     gdouble val = ggobi_stage_get_raw_value(self->stage, i, j);
     if (cat)
       self_add_level_instance(self, NULL, (gint)val);
   }
 }
}
