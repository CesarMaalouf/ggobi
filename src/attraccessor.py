def attr_accessor(name, type):
  return("""/**
 * reset_attr_%(name)s:
 * @self: #GGobiData 
 * @i: row index
 * @brush: persistent or transient
 *
 * Resets %(name)s attribute to previous value
**/
public gboolean
reset_attr_%(name)s(self, guint i, GGobiDataAttrSetMethod brush)
{
  // This code is autogenerated, do not edit by hand
  switch(brush) {
    case ATTR_SET_PERSISTENT:
      return self_set_attr_%(name)s(self, i, self->%(name)s_prev.els[i], brush);
    default:
      return self_set_attr_%(name)s(self, i, self->%(name)s.els[i], brush);
  }

}

/**
 * set_attr_%(name)s:
 * @self: #GGobiData
 * @i: row index
 * @brush: persistent or transient
 *
 * Sets %(name)s attribute to new value.
 * Returns: true if value has changed, false otherwise
**/
public gboolean
set_attr_%(name)s(self, guint i, %(type)s value, GGobiDataAttrSetMethod brush)
{
  // This code is autogenerated, do not edit by hand
  if (brush == ATTR_SET_TRANSIENT ?
    (self->%(name)s_now.els[i] == value) :
    (self->%(name)s.els[i] == value))
    return false;

  if (brush == ATTR_SET_PERSISTENT) {
    self->%(name)s_prev.els[i] = self->%(name)s.els[i];
    self->%(name)s.els[i] = value;
  }

  self->%(name)s_now.els[i] = value;
  return true;
}

/**
 * get_attr_%(name)s:
 * @self: #GGobiData
 * @i: row index
 * 
 * Retrieve current %(name)s
**/
public %(type)s
get_attr_%(name)s(self, guint i)
{
  // This code is autogenerated, do not edit by hand
  return self->%(name)s_now.els[i];
}""" % locals())