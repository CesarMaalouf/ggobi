/* Instantiates chains of pipeline stages from string descriptions */
/* Encapsulates the logic of which stages should be singletons and which
   are created new upon every request (like per display stages). One 
   factory will probably suffice for GGobi. New stage types can be added
   on the fly. Special cases presented by plugins / embedding environments 
   could be handled local factory instances or simply by manual construction 
   of the pipeline */
/* Since this behavior is shared across datasets, there is no need for a
   separate factory for each GGobiData. Thus, most methods in this class
   accept a GGobiData as an argument, which represents the root of a
   particular pipeline */
/* String description is names of stages separated by ':', for example:
   "filter:transform:world" */
/* Some sort of introspection would be nice here, but it's not clear
   if we want to expose the Product structure or do something else */

%h{
  #include "ggobi-data.h"
}

%privateheader{
  typedef struct _Product {
    GType type; /* type of stage to instantiate */
    gchar *parent; /* name of default parent stage */
    GGobiStage *stage; /* stored instance if singleton and already requested */
    gboolean singleton; /* whether only one instance of stage should exist */
  } Product; 
%}

class GGobi:Pipeline:Factory from G:Object {
  /* GGobiData ==> GHashTable (Name ==> Product) */
  protected GHashTable *products = { 
    g_hash_table_new_full(NULL, NULL, g_object_unref, g_hash_table_destroy)
  } destroywith g_hash_table_destroy;
  
  /* registry */
  
  public void
  register_stage(self, const gchar *name (check null), GType type, 
    gboolean singleton, const gchar *parent)
  {
  }
  public void
  unregister_stage(self, const gchar *name (check null))
  {
  }
  
  /* introspection */
  
  public GSList *
  get_stage_names(self)
  {
  }
  public gboolean
  is_stage_singleton(self, const gchar *name (check null))
  {
  }
  public const gchar *
  get_stage_parent_name(self, const gchar *name (check null))
  {
  }
  public GType
  get_stage_type(self, const gchar *name (check null))
  {
  }
  
  /* factory */
  
  public GGobiStage *
  get_pipeline(self, GGobi:Data *root (check null type), const gchar *path (check null))
  {
  }
}
