%a{
  #include <gtk/gtk.h>
  #if GTK_CHECK_VERSION(2, 8, 0)
%}
%{
  #include <math.h>
  /* Takes 1/64 degrees to radians and reverses */
  #define CAIRO_ANGLE(x) ((360 - (x/64.)) * M_PI / 180)
%}
%h{
  #include "ggobi-renderer.h"
  #include <cairo/cairo.h>
  #if CAIRO_HAS_GLITZ_SURFACE
  #include <cairo/cairo-glitz.h>
  #ifndef WIN32
  #include <glitz-glx.h>
  #include <gdk/gdkx.h>
  #else
  #include <glitz-wgl.h>
  #endif
  #endif
%}

class GGobi:Renderer:Cairo from GGobi:Renderer
{
  private cairo_t *cairo destroywith cairo_destroy;
  /* This should only be changed for "once off" operations like saving to a 
     file or printing - set to NULL to reset to blank surface */
  property POINTER cairo
  (nick = "cr", blurb = "The cairo context to which this renders", 
   type = cairo_t *, flags = CONSTRUCT_ONLY, export)
   set {
     if (g_value_get_pointer(VAL)) {
       if (selfp->cairo)
         cairo_destroy(selfp->cairo);
       selfp->cairo = cairo_reference(g_value_get_pointer(VAL));
     }
   }
   get {
     g_value_set_pointer(VAL, selfp->cairo);
   };
   
  override (GGobi:Renderer) GdkDrawable *
  create_target(GGobi:Renderer *self, GdkDrawable *parent)
  { // FIXME: eventually we don't want to use the parent's drawable at all
    // -- we should override everything with cairo
    GdkDrawable *target = PARENT_HANDLER(self, parent);
    /* if we do not have a cairo context yet, try for a glitz (pbuffer)
       surface, otherwise fallback to image surface */
    if (!SELF(self)->_priv->cairo)
      SELF(self)->_priv->cairo = self_create_cairo(SELF(self), target);
    return target;
  }
  
  private virtual cairo_t *
  create_cairo(self, GdkDrawable *target)
  {
    cairo_t *cr;
    cairo_surface_t *surf = self_create_cairo_glitz(target);
    if (!surf)
      //surf = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, width, height);
      cr = gdk_cairo_create(target);
    else {
      cr = cairo_create(surf);
      cairo_surface_destroy(surf);
    }
    return cr;
  }
  
  private void
  line_type(self, GdkGCValues *values)
  {
    cairo_line_cap_t cap = CAIRO_LINE_CAP_ROUND;
    cairo_line_join_t join = CAIRO_LINE_JOIN_ROUND;
    /*static double dashes[8];
    gint i;*/
    
    cairo_set_line_width(selfp->cairo, values->line_width+1);
    
    switch(values->cap_style) {
      case GDK_CAP_ROUND:
        cap = CAIRO_LINE_CAP_ROUND;
      break;
      case GDK_CAP_BUTT:
      case GDK_CAP_NOT_LAST:
        cap = CAIRO_LINE_CAP_BUTT;
      break;
      case GDK_CAP_PROJECTING:
        cap = CAIRO_LINE_CAP_SQUARE;
      break;
    }
    cairo_set_line_cap(selfp->cairo, cap);
    
    switch(values->join_style) {
      case GDK_JOIN_ROUND:
        join = CAIRO_LINE_JOIN_ROUND;
      break;
      case GDK_JOIN_MITER:
        join = CAIRO_LINE_JOIN_MITER;
        //cairo_set_miter_limit(selfp->cairo, gc->lmitre);
      break;
      case GDK_JOIN_BEVEL:
        join = CAIRO_LINE_JOIN_BEVEL;
      break;
    }
    cairo_set_line_join(selfp->cairo, join);
    // FIXME: Don't know how to get the dashes out of the GdkGC
    // Perhaps we could extend GdkGC
    /*
    for(i = 0; i < 8 && gc->lty & 15; i++) {
      dashes[i] = gc->lty & 15;
      gc->lty = gc->lty >> 4;
    }
  
    
    cairo_set_dash(cr, dashes, i, 0);*/
  }
  
  private void
  stroke(self, GdkGC *gc, gboolean filled)
  {
    GdkColor color;
    GdkGCValues values;
    GdkColormap *colors = gdk_gc_get_colormap(gc);
    gdk_gc_get_values(gc, &values);
    gdk_colormap_query_color(colors, values.foreground.pixel, &color);
    //g_debug("color: %d %d %d", color.red, color.green, color.blue);
    gdk_cairo_set_source_color(selfp->cairo, &color);
    if (filled)
      cairo_fill_preserve(selfp->cairo);
    self_line_type(self, &values);
    cairo_stroke(selfp->cairo);
  }
  private void
  polypath(self, guint npoints, GdkPoint *points)
  {
    gint i;
    cairo_move_to(selfp->cairo, points[0].x, points[0].y);
    for (i = 1; i < npoints; i++)
      cairo_line_to(selfp->cairo, points[i].x, points[i].y);
  }
  
  override (Gdk:Drawable) void 
  draw_rectangle (GdkDrawable  *self, GdkGC *gc, gboolean filled,
    gint x, gint y, gint width, gint height)
  {
    //g_debug("drawing rect: %d %d %d %d", x, y, width, height);
    cairo_rectangle(SELF(self)->_priv->cairo, x, y, width, height);
    self_stroke(SELF(self), gc, filled);
  }
  override (Gdk:Drawable) void 
  draw_arc(GdkDrawable  *self, GdkGC *gc, gboolean filled, gint x, gint y, 
    gint width, gint height, gint angle1, gint angle2)
  {
    //cairo_move_to(cr, x+r, y);
    cairo_t *cr = SELF(self)->_priv->cairo;
    cairo_save(cr);
    cairo_translate (cr, x + width / 2., y + height / 2.);
    cairo_scale (cr, (width / 2.), (height / 2.));
    //g_debug("drawing arc at: %d %d", x, y);
    cairo_arc_negative (cr, 0., 0., 1., CAIRO_ANGLE(angle1), CAIRO_ANGLE(angle2));
    cairo_restore(cr);
    self_stroke(SELF(self), gc, filled);
  }
  override (Gdk:Drawable) void 
  draw_polygon(GdkDrawable  *self, GdkGC *gc, gboolean filled, 
    GdkPoint *points, gint npoints)
  {
    //g_debug("POLYGON");
    self_polypath(SELF(self), npoints, points);
    cairo_close_path(SELF(self)->_priv->cairo);
    self_stroke(SELF(self), gc, filled);
  }
  override (Gdk:Drawable) void 
  draw_points(GdkDrawable  *self, GdkGC *gc, GdkPoint *points, gint npoints)
  {
    guint i;
    //g_debug("POINTS");
    cairo_t *cr = SELF(self)->_priv->cairo;
    for (i = 0; i < npoints; i++)
      cairo_rectangle(cr, points[i].x - 0.5, points[i].y - 0.5, 1., 1.);
    self_stroke(SELF(self), gc, FALSE);
  }
  override (Gdk:Drawable) void 
  draw_segments(GdkDrawable  *self, GdkGC *gc, GdkSegment *segs, gint nsegs)
  {
    guint i;
    //g_debug("SEGMENTS");
    cairo_t *cr = SELF(self)->_priv->cairo;
    for (i = 0; i < nsegs; i++) {
      cairo_move_to(cr, segs[i].x1, segs[i].y1);
      cairo_line_to(cr, segs[i].x2, segs[i].y2);
    }
    self_stroke(SELF(self), gc, FALSE);
  }
  override (Gdk:Drawable) void 
  draw_lines(GdkDrawable  *self, GdkGC *gc, GdkPoint *points, gint npoints)
  {
    self_polypath(SELF(self), npoints, points);
    self_stroke(SELF(self), gc, FALSE);
  }
  override (Gdk:Drawable) void 
  draw_trapezoids(GdkDrawable *self, GdkGC *gc, GdkTrapezoid *trapezoids, 
    gint n_trapezoids)
  {
    guint i;
    cairo_t *cr = SELF(self)->_priv->cairo;
    for (i = 0; i < n_trapezoids; i++) {
      cairo_move_to(cr, trapezoids[i].x11, trapezoids[i].y1);
      cairo_line_to(cr, trapezoids[i].x21, trapezoids[i].y1);
      cairo_line_to(cr, trapezoids[i].x22, trapezoids[i].y2);
      cairo_line_to(cr, trapezoids[i].x12, trapezoids[i].y2);
      cairo_line_to(cr, trapezoids[i].x11, trapezoids[i].y1);
    }
    self_stroke(SELF(self), gc, FALSE);
  }
  
  /* we do not support the old GDK text stuff (yet) */
  override (Gdk:Drawable) void 
  draw_text(GdkDrawable  *self, GdkFont *font, GdkGC *gc, gint x, gint y, 
    const gchar  *text, gint text_length)
  {
  }
  override (Gdk:Drawable) void 
  draw_text_wc(GdkDrawable *self, GdkFont *font, GdkGC *gc, gint x, gint y, 
    const GdkWChar *text, gint text_length)
  {
  }
  /* here is the modern pango stuff */
  override (Gdk:Drawable) void 
  draw_glyphs(GdkDrawable *self, GdkGC *gc, PangoFont *font, gint x, gint y, 
    PangoGlyphString *glyphs)
  {
    cairo_move_to(SELF(self)->_priv->cairo, x, y);
    pango_cairo_show_glyph_string(SELF(self)->_priv->cairo, font, glyphs);
  }
  override (Gdk:Drawable) void 
  draw_glyphs_transformed(GdkDrawable *self, GdkGC *gc, PangoMatrix *matrix, 
    PangoFont *font, gint x, gint y, PangoGlyphString *glyphs)
  {
    cairo_t *cr = SELF(self)->_priv->cairo;
    cairo_matrix_t cr_matrix = 
    { matrix->xx, matrix->xy, matrix->yx, matrix->yy, matrix->x0, matrix->y0 };
    cairo_save(cr);
    cairo_set_matrix(cr, &cr_matrix);
    GDK_DRAWABLE_GET_CLASS(self)->draw_glyphs(self, gc, font, x, y, glyphs);
    cairo_restore(cr);
  }
  
  override (Gdk:Drawable) void 
  draw_drawable(GdkDrawable  *self, GdkGC *gc, GdkDrawable  *src, gint xsrc, 
    gint ysrc, gint xdest, gint ydest, gint width, gint height)
  {
    cairo_t *cr = SELF(self)->_priv->cairo;
    cairo_surface_t *surf = GDK_DRAWABLE_GET_CLASS(src)->ref_cairo_surface(src);
    cairo_set_source_surface(cr, surf, xdest - xsrc, ydest - ysrc);
    cairo_save(cr);
    cairo_rectangle(cr, xdest, ydest, width, height);
    cairo_clip(cr);
    cairo_paint(cr);
    cairo_restore(cr);
  }
  
  override (Gdk:Drawable) GdkDrawable* 
  get_composite_drawable(GdkDrawable *self, gint x, gint y, gint width, 
    gint height, gint *composite_x_offset, gint *composite_y_offset)
  {
    GdkDrawable *parent, *composite;
    cairo_t *cr;
    g_object_get(G_OBJECT(self), "parent", &parent, NULL);
    composite = gdk_pixmap_new(parent, width, height, -1);
    cr = gdk_cairo_create(composite);
    cairo_set_source_surface(cr, cairo_get_target(SELF(self)->_priv->cairo), 
      -1*x, -1*y);
    cairo_paint(cr);
    cairo_destroy(cr);
    *composite_x_offset = 0;
    *composite_y_offset = 0;
    return composite;
  }
  
  override (Gdk:Drawable) cairo_surface_t *
  ref_cairo_surface(GdkDrawable *self)
  {
    return cairo_surface_reference(cairo_get_target(SELF(self)->_priv->cairo));
  }
  
  /* attempt to create a glitz cairo surface, returning NULL on failure */
  private cairo_surface_t *
  create_cairo_glitz(GdkDrawable * drawable)
  {
    #if CAIRO_HAS_GLITZ_SURFACE
    gulong mask;
    gint width, height;
    cairo_surface_t *cairo_s;
    glitz_drawable_t *glitz_d = NULL;
    glitz_surface_t *glitz_s;
    glitz_format_t *format;
    glitz_drawable_format_t *d_format, templ = { 0, };
    
    gdk_drawable_get_size(drawable, &width, &height);

    /* ask glitz for a 32 bit rgb drawable, 1 sample, single-buffer */
    templ.color.red_size = 8;
    templ.color.green_size = 8;
    templ.color.blue_size = 8;
    templ.color.alpha_size = 8;
    templ.color.fourcc = GLITZ_FOURCC_RGB;
    templ.samples = 1;
    
    mask = GLITZ_FORMAT_SAMPLES_MASK | GLITZ_FORMAT_FOURCC_MASK |
      GLITZ_FORMAT_RED_SIZE_MASK | GLITZ_FORMAT_GREEN_SIZE_MASK |
      GLITZ_FORMAT_BLUE_SIZE_MASK | GLITZ_FORMAT_ALPHA_SIZE_MASK |
      GLITZ_FORMAT_DOUBLEBUFFER_MASK;
    
    #ifndef WIN32
    {
      GdkDisplay *display = gdk_drawable_get_display(drawable);
      Display *dpy = gdk_x11_display_get_xdisplay(display);
      /* First, get drawable format for our pbuffer */
      d_format = glitz_glx_find_pbuffer_format(dpy, DefaultScreen (dpy), 
        mask, &templ, 0);
      if (!d_format) return NULL;
      /* now create the pbuffer */
      glitz_d = glitz_glx_create_pbuffer_drawable (dpy, DefaultScreen (dpy),
        d_format, width, height);
    }
    #else
    d_format = glitz_wgl_find_pbuffer_format (mask, &templ, 0);
    if (!d_format) return NULL;
    glitz_d = glitz_wgl_create_pbuffer_drawable (d_format, width, height);
    #endif
  
    /* if we have a glitz drawable, get a glitz format */
    format = glitz_find_standard_format (glitz_d, GLITZ_STANDARD_ARGB32);
    /* use the glitz format to create a glitz surface */
    glitz_s = glitz_surface_create (glitz_d, format, width, height, 0, NULL);
    /* attach the glitz surface to the glitz drawable */
    glitz_surface_attach(glitz_s, glitz_d, GLITZ_DRAWABLE_BUFFER_FRONT_COLOR);
    /* create our cairo_surface */
    cairo_s = cairo_glitz_surface_create(glitz_s);
    
    /* cleanup */
    glitz_drawable_destroy(glitz_d);
    glitz_surface_destroy(glitz_s);
g_debug("you got da glitz love");    
    return (cairo_s);
    #else
    return NULL;
    #endif
  }
}
%a{
  #endif
%}
