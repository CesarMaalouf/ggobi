/* Jitter stage.

	For each jittered variable, store:
	
	 * distribution (normal or uniform)
	 * jitter amount (between 0 and 1)
	
	To do:
	 * extract code for generating a random normal 
	 * datastructure to store dist, amount and cache for each variable

	Jit value = original * (1 - amount) + random [-1, 1] * range * amount

	Note: jittering amounts are not cached, so when modifying jitter points,
	they are not "unjittered" prior to modification.
	
*/

%h{
  #include "ggobi-stage.h"
%}

%{
%}

class GGobi:Stage:Jitter from GGobi:Stage {
  private array_f tform destroy {
    if(&(VAR)) 
      arrayf_free(&(VAR), 0, 0);
  };
  
  override (GGobi:Stage) void
  process_incoming(GGobiStage *self, GGobiPipelineMessage *msg)
  {
  }

  
  public GObject *
  new(GGobiStage *parent)
  {
    GObject *o = G_OBJECT(GET_NEW_VARG("parent", parent, NULL));
    return(o);
  }
  
  override (GGobi:Stage) gdouble
  get_raw_value(GGobi:Stage *self (check null type), guint i, guint j)
  {
  }
  
  override (GGobi:Stage) void
  set_raw_value(GGobi:Stage *self (check null type), guint i, guint j, gdouble value)
  {
  }
  
}
