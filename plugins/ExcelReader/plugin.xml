<inputPlugin name="ExcelReader" load="immediate" interactive="true">
   <description>input plugin for reading data from Excel using COM</description>
   <author>Duncan Temple Lang</author>
   <modeName>excel</modeName>
   <dll name="plugins/ExcelReader/ExcelReader">
    <init description="ExcelDataDescription" onLoad="onLoad"/>
   </dll>
   <usage>
    ggobi --init=ggobi.init --datamode=excel d:\\duncan\\quakesNoNames.xls 
   </usage>
   <documentation xmlns:r="http://www.r-project.org"
                  xmlns:s="http://cm.bell-labs.com/stat/S4"
                  xmlns:com="http://www.microsoft.com"
                  xmlns:c="http://www.c.org">

 This plugin is intended to allow one to read data directly from Excel
  or from an Excel file.  We use COM to create an instance of Excel
  and then load the specified file into it, be it a regular XSL or CSV file. 
  This allows us to read
  files directly without having to request that the user export it in
  comma-separted format (CSV).  Indeed, the data need never exist in a
  file, but instead we could instruct the plugin to use an existing
  Excel instance and read its data<footnote><para/>The code attempts to do this
  but unfortunately fails. If no file name is specified on the GGobi command line,
  but this plugin is called (e.g. with --datamode=excel),
  then we try to get the currently active instance of the Excel application.
  However, we get an error message of the form
  <quote>The object exporter specified was not found.</quote>
  </footnote>. If the data came to be in Excel
  from a database query, or some other input mechanism such as from a
  URL, there need be no local file.

 <para/>

Examples for other input sources include ADO, OIM files from MSSQL and
SAS, ... 
Since we are using DCOM, we can also use it for displaying help pages
and other clients.

<para/>

We might also make GGobi a COM server and allow it to be invoked from
Excel rather than vice-versa.  One of the simplest ways to program
this is to create the COM server as an R COM server and use the Rggobi
mechanism to implement the different methods.  This is reasonably
easy. See <s:package>RDCOMServer</s:package>.

<para/>


 In the future, someone might want to make this plugin customizable
via a dialog.  One could make it operate as a regular plugin and have
a dialog popup when selected from a menu.  This dialog would then
allow the user to specify the range, whether the first consisted of
names or regular values, the "symbol" to use for a missing value, and
so on.

<para/>
We should note that we can do this from R using the
<r:package>RDCOMClient</r:package> and with an
<r:package>RExcelClient</r:package> and it would be better to put the
effort into developing that code. We could then use that via an R
plugin to ggobi, an R DCOM server, or via Rggobi.

<note>
The implementation of this plugin is strange, to say the least.
We use the IDispatch mechanism rather than compiling the stubs
for the Excel classes.
There are two reasons for this. 
<itemizedlist>
<listitem>
I am not currently familiar with the ways to generate
the stubs from type libraries, etc. 
</listitem>
<listitem>
If we did generate stubs using Microsft's Visual C++,
we would then want to compile them with MinGW
</listitem>
</itemizedlist>
</note>

<details>
The mechanism for reading the data is as follows.
 We then query the
  workbook for its sheets and loop over these to create a GGobi
  dataset from each of these.  For each worksheet, we ask for the its
  <com:property>UsedRange</com:property> property.  This gives us the
  range of cells and, assuming that the data is contiguously layed
  out, i.e. with no blank lines or columns.  Individual cells may be
  blank in which case we treat this element as a missing value.
  At present, we treat data quite simply.
  We start by assuming everything is a number.
<para/> 

Getting the dimensions of a dataset from a sheet
is done using the following steps.

<s:code>
ur = sheet[["UsedRange"]]

nr = ur$End(xlDown) - ur[["Row"]] + 1
nc = ur$End(xlToRight) - ur[["Column"]] + 1
</s:code>
At this point, we can allocate our datad
instance. We can add the record and column names later.

<para/> 

To get the actual values, we need only ask the
<com:class>Range</com:class> object <var>ur</var> for its
<com:property>Value</com:property> values.  This is returned as a
two-dimensional array.  We then traverse this and fill in the values
in the corresponding dataset positions in GGobi.

<para/>

 We handle the different values by converting them from their
respective <c:type>VARIANT</c:type> structures.
We can also perform heuristics to determine whether the

<para/>

We can use different strategies for handling large data. For example,
if we don't want to handle all the values in memory at one time in
both GGobi and in the COM array, we can change to looping over either
the columns or the cells and making more
calls to Excel. For example, we might
loop something like
<c:code>
<![CDATA[
for(j = 0; j < nc; j++) {
 for(i = 0; i < nr ; i++) {
   datad->raw.vals[i][j] = ur$Item(i+i, j+i);
 }
}
]]>
</c:code>

Dealing with categorical values, etc.  requires a great extra
processing to compute or augment the levels.  We can use the XML code
and facilities within that to do this.

<para/>
</details>

  </documentation>

<bugs>

Empty cells are transferred to us as the value 0.00 rather than
missing/void. As a result, we don't handle missing values.
We would have to ask for the formula for a given cell
rather than assuming that the VARIANT will come across as 
VT_VOID. However, this involves more communication with the 
Excel server and more code!

<para/>

There are several missing features.
<itemizedlist>
<listitem>
Only handles numbers; not dates, strings, etc.
One can add converters for these different VARIANT types
and handle them appropriately without having
to use COM.
</listitem>
<listitem>
Does not handle categorical variables at all.
This is quite feasible using some of the code from
the XML parser. The computations are entirely local and do not involve COM.
</listitem>
<listitem>
No support for edges.
</listitem>
<listitem>
No support for colors, glyphs, etc.
</listitem>
<listitem>
No support for additional command line arguments
such as
 <itemizedlist>
 <listitem> --headers=true to specify whether the first row gives the variable
  names,
 </listitem>
 <listitem>
   --visible=true to make the Excel interface visible to the user
 </listitem>
 <listitem>
 --rows="20..30", --columns="1,2,4,6",
to do on-the-fly subsetting.
 </listitem>
 </itemizedlist>
If one wants to do this, use a different
interface such as R, Python or Perl to  program these operations for DCOM.
</listitem>
</itemizedlist>
</bugs>
</inputPlugin>
