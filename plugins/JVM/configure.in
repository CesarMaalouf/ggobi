AC_INIT(jvm.c)

AC_ARG_ENABLE(debug,[--enable-debug   generate debugging output when running], DEBUG=$withval, DEBUG="yes")
AC_ARG_ENABLE(native,[--enable-native provide access to internal GGobi objects from Java code], NATIVE_ACCESS=$withval, NATIVE_ACCESS="yes")

AC_ARG_WITH(java-gnome, [--with-java-gnome  give the name of the top-level directory of the Java-Gnome bindings for Gtk], JAVA_GNOME_DIR=${withval})

AC_PATH_PROG(GTK_CONFIG, gtk-config)
AC_PATH_PROG(JAVA, java)
AC_PATH_PROG(JAVAC, javac)
AC_PATH_PROG(JAVAH, javah)

if test -z "${JAVA}" ; then
 echo "Cannot find java, the executable for running classes/applications"
 exit 1
fi

JAVA_HOME=`$JAVA -classpath . vendor -h`

AC_SUBST(GTK_CONFIG)

JAVA_ARCH_NAME=`$JAVA -classpath . vendor -o`
JNI_INCLUDES="${JAVA_HOME}/include ${JAVA_HOME}/include/${JAVA_ARCH_NAME}"

TMP=$LD_LIBRARY_PATH
 LD_LIBRARY_PATH= 
 export LD_LIBRARY_PATH 
 JNI_LIBS=`$JAVA -classpath . vendor -l`
LD_LIBRARY_PATH=$TMP


if test -n "${JAVA_GNOME_DIR}" ; then
  if test ! -d ${JAVA_GNOME_DIR} || test ! -r ${JAVA_GNOME_DIR}/lib ; then
    echo "JAVA_GNOME_DIR must be the top-level directory of the java-gnome distribution. Ignoring setting"
    JAVA_GNOME_DIR=""
  fi
fi

AC_SUBST(DEBUG)
AC_SUBST(NATIVE_ACCESS)

AC_SUBST(JNI_LIBS)
AC_SUBST(JNI_INCLUDES)
AC_SUBST(JAVAC)
AC_SUBST(JAVAH)
AC_SUBST(JAVA)

PWD=`pwd`
AC_SUBST(PWD)
AC_SUBST(JAVA_GNOME_DIR)

AC_OUTPUT(local.config Gtk/plugin.xml)
